{-

  TASK 3 - Message validation.
  Write the method that checks that cell contains valid message
  in accordance to https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L155
  Note, tests will only cover valid and invalid MessageAny objects,
  valid MessageRelaxed (which are not simultaneously MessageAny) will not be presented
  If message is invalid for any reason - method should return (0, null), otherwise
  it should return (-1, [slice src, slice dest, int amount] ), where src, dest and
  amount represents source of the message, destination of the message and attached
  amount of TONs. If any of those values are not presented (or presented as
  addr_none slice) in the message cell - they should be substituted with null.
  It is guaranteed that for all tests any HashmapE datatype in message structure
  is empty hashmaps (has hme_empty constructor).
  Documentation on TL-B schemes can be found in https://ton.org/docs/#/overviews/TL-B
-}

() recv_internal() {
}


;; testable
(int, tuple) validate_message(cell message) method_id {

    slice d_msg = message.begin_parse();

    if (slice_data_empty?(d_msg)) {
        return (0, null()); 
    }

    slice src_addr = null();
    slice dest_addr = null();
    int amount = 0;


    int addr_type = d_msg~load_uint(1);             

    if (addr_type == 0) {                           
        int flags = d_msg~load_uint(3);             
        src_addr = d_msg~load_msg_addr();           
        dest_addr = d_msg~load_msg_addr();          
        
        if (equal_slice(src_addr, dest_addr)) {
            return (0, null());
        }

        if (first(parse_addr(src_addr)) == 0) {           
            src_addr = null(); 
        }
        if (first(parse_addr(dest_addr)) == 0) {             
            dest_addr = null(); 
        }

        amount = d_msg~load_grams();           
    

        int ihr_fee = d_msg~load_grams();     
        int fwf_fee = d_msg~load_grams();     
        int clocal = d_msg~load_uint(64);     
        if (clocal > cur_lt()) {
            return (0, null());
        }

        int cunix = d_msg~load_uint(32);      
        if (cunix > now()) {
            return (0, null());
        }
    } 
    
    if (addr_type == 1) {

        int ext_addr_type = d_msg~load_uint(1);    

        src_addr = d_msg~load_msg_addr();       
        dest_addr = d_msg~load_msg_addr();      
        if equal_slice(src_addr, dest_addr) {
            return (0, null());
        }
        if (first(parse_addr(src_addr)) == 0) {          
            src_addr = null(); 
        }
        if (first(parse_addr(dest_addr)) == 0) {              
            dest_addr = null(); 
        }

        if (ext_addr_type == 0){
            amount = d_msg~load_grams();        
        } 
        if (ext_addr_type == 1) {
            int clocal = d_msg~load_uint(64);   
            if (clocal > cur_lt()) {
                return (0, null());
            }
            int cunix = d_msg~load_uint(32);            
            if (cunix > now()) {
                return (0, null());
            }
        }
    }

    int init_and_inplace = d_msg~load_uint(2);

    (int n_last_bits, int n_refs) = d_msg.slice_bits_refs();

    if (init_and_inplace > n_refs) {
        return (0, null());
    }

    if ((init_and_inplace == 0) & (n_last_bits == 0)) {
        return (0, null());
    }

    return (-1, unsafe_tuple([src_addr, dest_addr, amount]));

}